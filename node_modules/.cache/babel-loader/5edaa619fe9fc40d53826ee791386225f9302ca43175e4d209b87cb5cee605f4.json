{"ast":null,"code":"/* istanbul ignore file */\n\nimport Cookies from \"js-cookie\";\nimport jwtDecode from \"jwt-decode\";\nexport class ErrorFromValidation extends Error {\n  static msg(validationErrors) {\n    if (validationErrors.length === 0) {\n      return \"Unspecified validation error\";\n    }\n    return validationErrors.map(validationError => {\n      return `${validationError.msg} (${validationError.location} ${validationError.param}, value ${validationError.value})`;\n    }).join(\". \");\n  }\n  constructor(status, validationErrors) {\n    super(ErrorFromValidation.msg(validationErrors));\n    this.param = void 0;\n    this.status = void 0;\n    this.validationErrors = void 0;\n    this.status = status;\n    this.validationErrors = validationErrors;\n  }\n}\nexport class ErrorWithHTML extends Error {\n  constructor(status, html) {\n    super(\"Error\");\n    this.html = void 0;\n    this.status = void 0;\n    this.status = status;\n    let bodyStart = html.indexOf(\"<body\");\n    if (bodyStart >= 0) {\n      bodyStart = html.indexOf(\">\", bodyStart);\n    }\n    const bodyEnd = html.indexOf(\"</body>\", bodyStart);\n    if (bodyStart >= 0 && bodyEnd >= 0) {\n      this.html = \"<div>\" + html.substring(bodyStart + 1, bodyEnd) + \"</div>\";\n    } else {\n      this.html = html;\n    }\n  }\n}\n\n/**\n * ValidationError created by express-validator (without nested errors).\n */\n\n/**\n * Funktioniert wie fetch, parst aber die Antwort als JSON oder wirft eine Exception.\n * \n * Falls die Antwort ein Validierungsfehler ist (Status 400), wird eine Exception vom Typ ErrorFromValidation geworfen.\n * Falls die Antwort ein HTML-Dokument ist (Status 404/500), wird eine Exception vom Typ ErrorWithHTML geworfen.\n * \n * Sowohl ErrorFromValidation als auch ErrorWithHTML sind von Error abgeleitet, haben eine zusätzliche Eigenschaft \"status\"\n * und können in der Komponente, die im Fehlerfall angezeigt wird, verwendet werden, um den Fehler genauer anzuzeigen.\n */\nasync function fetchWithErrorHandling(url, init) {\n  var _response$headers$get;\n  const response = await fetch(url, init);\n  const contentType = (_response$headers$get = response.headers.get(\"Content-Type\")) !== null && _response$headers$get !== void 0 ? _response$headers$get : \"\";\n  if (contentType.startsWith(\"application/json\")) {\n    const data = await response.json();\n    if (response.ok) {\n      return data;\n    }\n    if (data.errors instanceof Array) {\n      const validationErrors = data.errors;\n      throw new ErrorFromValidation(response.status, validationErrors);\n    } else {\n      throw new Error(`Status ${response.status}: ${JSON.stringify(data)}`);\n    }\n  } else if (contentType.startsWith(\"text/html\")) {\n    const html = await response.text();\n    throw new ErrorWithHTML(response.status, html);\n  } else if (contentType.startsWith(\"text/plain\")) {\n    const text = await response.text();\n    throw new Error(`Status ${response.status}: ${text}`);\n  }\n  if (response.ok) {\n    return undefined;\n  }\n  throw new Error(`Status ${response.status}`);\n}\nconst HOST = process.env.REACT_APP_API_SERVER_URL;\n\n/**\n * Ergänzen Sie hier die Anbindung an den Server\n */\n\nexport async function getBoard() {\n  const url = `${HOST}/board`;\n  const response = await fetch(url);\n  return await response.json();\n}\nexport async function getUser(userId) {\n  console.log(\"getUser (erstmal ohne header im response\");\n  const url = `${HOST}/user/${userId}`;\n  const response = await fetch(url);\n  return await response.json();\n}\nexport async function getUsers() {\n  const url = `${HOST}/users`;\n  const response = await fetch(url);\n  return await response.json();\n}\n\n/*\nexport async function getBoardwithId(userId: string): Promise<BoardResource> {\n    const url = `${HOST}/board`;\n    const response = await fetch(url, {\n        method: 'GET',\n        body: JSON.stringify({ userId }),\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\"\n            }\n        });\n    return await response.json();\n}\n*/\n\nexport async function getMessages(channelId) {\n  const url = `${HOST}/channel/${channelId}/messages`;\n  const response = await fetch(url);\n  return await response.json();\n}\nexport async function getMessage(messageId) {\n  const url = `${HOST}/message/${messageId}/`;\n  const response = await fetch(url);\n  return await response.json();\n}\nexport async function getChannel(channelId) {\n  const url = `${HOST}/channel/${channelId}/`;\n  const response = await fetch(url);\n  return await response.json();\n}\nexport async function login(email, password) {\n  const url = `${HOST}/login`;\n  const response = await fetch(url, {\n    method: 'POST',\n    body: JSON.stringify({\n      email,\n      password\n    }),\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  return response.ok;\n}\nexport async function createChannel(channel) {\n  const url = `${HOST}/channel`;\n  const response = await fetch(url, {\n    method: 'POST',\n    body: JSON.stringify(channel),\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  return response.ok;\n}\nexport async function updateChannel(channel) {\n  const url = `${HOST}/channel/${channel.id}/`;\n  const response = await fetch(url, {\n    method: 'PUT',\n    body: JSON.stringify(channel),\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  return response.ok;\n}\nexport async function createMessage(message) {\n  const url = `${HOST}/message`;\n  const response = await fetch(url, {\n    method: 'POST',\n    body: JSON.stringify(message),\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  return response.ok;\n}\nexport async function updateMessage(message) {\n  console.log(\"bei updateMessage\");\n  const url = `${HOST}/message/${message.id}/`;\n  const response = await fetchWithErrorHandling(url, {\n    method: 'PUT',\n    body: JSON.stringify(message),\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${Cookies.get(\"access_token\")}`\n    }\n  });\n  return response;\n  //return response.ok;\n}\n\nexport async function createUser(user) {\n  console.log(\"bei createUser\");\n  const url = `${HOST}/user`;\n  const response = await fetch(url, {\n    method: 'POST',\n    body: JSON.stringify(user),\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\"\n    }\n  });\n  return response.ok;\n}\nexport async function updateUser(user) {\n  console.log(\"bei updateUser\");\n  const url = `${HOST}/user/${user.id}/`;\n  const response = await fetchWithErrorHandling(url, {\n    method: 'PUT',\n    body: JSON.stringify(user),\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${Cookies.get(\"access_token\")}`\n    }\n  });\n  return response;\n}\nexport async function deleteChannel(channelId) {\n  const url = `${HOST}/channel/${channelId}/`;\n  const response = await fetch(url, {\n    method: 'DELETE',\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${Cookies.get(\"access_token\")}`\n    }\n  });\n  return response.ok;\n}\nexport async function deleteMessage(messageId) {\n  const url = `${HOST}/message/${messageId}/`;\n  const response = await fetch(url, {\n    method: 'DELETE',\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${Cookies.get(\"access_token\")}`\n    }\n  });\n  return response.ok;\n}\nexport async function deleteUser(userId) {\n  const url = `${HOST}/user/${userId}/`;\n  const response = await fetch(url, {\n    method: 'DELETE',\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${Cookies.get(\"access_token\")}`\n    }\n  });\n  return response.ok;\n}\nexport function getUserIdFromJWT() {\n  const cookie = Cookies.get(\"access_token\");\n  if (cookie) {\n    const jwt = jwtDecode(cookie);\n    const userId = jwt.sub;\n    return userId;\n  }\n  return undefined;\n}\nexport async function isUserAdmin(userId) {\n  const url = `${HOST}/user/${userId}/isadmin`;\n  const response = await fetch(url, {\n    method: 'GET',\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${Cookies.get(\"access_token\")}`\n    }\n  });\n  return response.ok;\n}\nexport function logout() {\n  Cookies.remove(\"access_token\");\n}","map":{"version":3,"names":["Cookies","jwtDecode","ErrorFromValidation","Error","msg","validationErrors","length","map","validationError","location","param","value","join","constructor","status","ErrorWithHTML","html","bodyStart","indexOf","bodyEnd","substring","fetchWithErrorHandling","url","init","response","fetch","contentType","headers","get","startsWith","data","json","ok","errors","Array","JSON","stringify","text","undefined","HOST","process","env","REACT_APP_API_SERVER_URL","getBoard","getUser","userId","console","log","getUsers","getMessages","channelId","getMessage","messageId","getChannel","login","email","password","method","body","Accept","createChannel","channel","updateChannel","id","createMessage","message","updateMessage","Authorization","createUser","user","updateUser","deleteChannel","deleteMessage","deleteUser","getUserIdFromJWT","cookie","jwt","sub","isUserAdmin","logout","remove"],"sources":["/Users/khatiazitanishvili/Downloads/we2.blatt11-main 4/src/backend/boardapi.ts"],"sourcesContent":["/* istanbul ignore file */\n\nimport Cookies from \"js-cookie\";\nimport jwtDecode from \"jwt-decode\";\nimport { BoardResource, ChannelResource, MessageResource, MessagesResource } from \"../ChannelResources\";\nimport { UserResource, UsersResource } from \"../AdministerUsersService\";\n\nexport class ErrorFromValidation extends Error {\n    param: string | undefined;\n    status: number;\n    validationErrors: ValidationError[];\n\n    private static msg(validationErrors: ValidationError[]): string {\n        if (validationErrors.length === 0) {\n            return \"Unspecified validation error\";\n        }\n        return validationErrors.map((validationError) => {\n            return `${validationError.msg} (${validationError.location} ${validationError.param}, value ${validationError.value})`;\n        }).join(\". \");\n    }\n\n    constructor(status: number, validationErrors: ValidationError[]) {\n        super(ErrorFromValidation.msg(validationErrors));\n        this.status = status;\n        this.validationErrors = validationErrors;\n    }\n}\n\nexport class ErrorWithHTML extends Error {\n    html: string;\n    status: number;\n\n    constructor(status: number, html: string) {\n        super(\"Error\");\n        this.status = status;\n        let bodyStart = html.indexOf(\"<body\");\n        if (bodyStart >= 0) {\n            bodyStart = html.indexOf(\">\", bodyStart);\n        }\n        const bodyEnd = html.indexOf(\"</body>\", bodyStart);\n        if (bodyStart >= 0 && bodyEnd >= 0) {\n            this.html = \"<div>\" + html.substring(bodyStart + 1, bodyEnd) + \"</div>\";\n        } else {\n            this.html = html;\n        }\n\n    }\n}\n\n/**\n * ValidationError created by express-validator (without nested errors).\n */\ntype ValidationError = {\n    msg: string;\n    param: string;\n    location: string;\n    value: string;\n}\n\n/**\n * Funktioniert wie fetch, parst aber die Antwort als JSON oder wirft eine Exception.\n * \n * Falls die Antwort ein Validierungsfehler ist (Status 400), wird eine Exception vom Typ ErrorFromValidation geworfen.\n * Falls die Antwort ein HTML-Dokument ist (Status 404/500), wird eine Exception vom Typ ErrorWithHTML geworfen.\n * \n * Sowohl ErrorFromValidation als auch ErrorWithHTML sind von Error abgeleitet, haben eine zusätzliche Eigenschaft \"status\"\n * und können in der Komponente, die im Fehlerfall angezeigt wird, verwendet werden, um den Fehler genauer anzuzeigen.\n */\nasync function fetchWithErrorHandling<R>(url: string, init?: RequestInit): Promise<R> {\n\n    const response: Response = await fetch(url, init);\n\n    const contentType = response.headers.get(\"Content-Type\") ?? \"\";\n    if (contentType.startsWith(\"application/json\")) {\n        const data = await response.json()\n        if (response.ok) {\n            return data;\n        }\n        if (data.errors instanceof Array) {\n            const validationErrors = data.errors as ValidationError[];\n            throw new ErrorFromValidation(response.status, validationErrors);\n        } else {\n            throw new Error(`Status ${response.status}: ${JSON.stringify(data)}`);\n        }\n    } else if (contentType.startsWith(\"text/html\")) {\n        const html = await response.text();\n        throw new ErrorWithHTML(response.status, html);\n    } else if (contentType.startsWith(\"text/plain\")) {\n        const text = await response.text();\n        throw new Error(`Status ${response.status}: ${text}`);\n    }\n\n    if (response.ok) {\n        return undefined as unknown as R;\n    }\n    throw new Error(`Status ${response.status}`);\n\n}\n\nconst HOST = process.env.REACT_APP_API_SERVER_URL;\n\n/**\n * Ergänzen Sie hier die Anbindung an den Server\n */\n\nexport async function getBoard(): Promise<BoardResource> {\n    const url = `${HOST}/board`;\n    const response = await fetch(url);\n    return await response.json();\n}\n\nexport async function getUser(userId: string): Promise<UserResource> {\n    console.log(\"getUser (erstmal ohne header im response\");\n    const url = `${HOST}/user/${userId}`;\n    const response = await fetch(url);\n    return await response.json();\n}\n\nexport async function getUsers(): Promise<UsersResource> {\n    const url = `${HOST}/users`;\n    const response = await fetch(url);\n    return await response.json();\n}\n\n/*\nexport async function getBoardwithId(userId: string): Promise<BoardResource> {\n    const url = `${HOST}/board`;\n    const response = await fetch(url, {\n        method: 'GET',\n        body: JSON.stringify({ userId }),\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\"\n            }\n        });\n    return await response.json();\n}\n*/\n\nexport async function getMessages(channelId: string): Promise<MessagesResource> {\n    const url = `${HOST}/channel/${channelId}/messages`;\n    const response = await fetch(url);\n    return await response.json();\n}\n\nexport async function getMessage(messageId: string): Promise<MessageResource> {\n    const url = `${HOST}/message/${messageId}/`;\n    const response = await fetch(url);\n    return await response.json();\n}\n\n\nexport async function getChannel(channelId: string): Promise<ChannelResource> {\n    const url = `${HOST}/channel/${channelId}/`;\n    const response = await fetch(url);\n    return await response.json();\n}\n\nexport async function login(email: string, password: string): Promise<boolean> {\n    const url = `${HOST}/login`;\n    const response = await fetch(url, {\n        method: 'POST', \n        body: JSON.stringify({ email, password }),\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\"\n        }\n    });\n    return response.ok;\n}\n\nexport async function createChannel(channel: ChannelResource): Promise<boolean> {\n    const url = `${HOST}/channel`;\n    const response = await fetch(url, {\n        method: 'POST', \n        body: JSON.stringify(channel),\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\"\n        }\n    });\n    return response.ok;\n}\n\nexport async function updateChannel(channel: ChannelResource): Promise<boolean> {\n    const url = `${HOST}/channel/${channel.id}/`;\n    const response = await fetch(url, {\n        method: 'PUT', \n        body: JSON.stringify(channel),\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\"\n        }\n    });\n    return response.ok;\n}\n\nexport async function createMessage(message: MessageResource): Promise<boolean> {\n    const url = `${HOST}/message`;\n    const response = await fetch(url, {\n        method: 'POST', \n        body: JSON.stringify(message),\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\"\n        }\n    });\n    return response.ok;\n}\n\nexport async function updateMessage(message: MessageResource): Promise<unknown> {\n    console.log(\"bei updateMessage\");\n    const url = `${HOST}/message/${message.id}/`;\n    const response = await fetchWithErrorHandling(url, {\n        method: 'PUT', \n        body: JSON.stringify(message),\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${Cookies.get(\"access_token\")}`\n        }\n    });\n    return response;\n    //return response.ok;\n}\n\nexport async function createUser(user: UserResource): Promise<boolean> {\n    console.log(\"bei createUser\");\n    const url = `${HOST}/user`;\n    const response = await fetch(url, {\n        method: 'POST', \n        body: JSON.stringify(user),\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\"\n        }\n    });\n    return response.ok;\n}\n\nexport async function updateUser(user: UserResource): Promise<unknown> {\n    console.log(\"bei updateUser\");\n    const url = `${HOST}/user/${user.id}/`;\n    const response = await fetchWithErrorHandling(url, {\n        method: 'PUT', \n        body: JSON.stringify(user),\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${Cookies.get(\"access_token\")}`\n        }\n    });\n    return response;\n}\n\nexport async function deleteChannel(channelId: string): Promise<boolean> {\n    const url = `${HOST}/channel/${channelId}/`;\n    const response = await fetch(url, {\n        method: 'DELETE',\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${Cookies.get(\"access_token\")}`\n        }\n    });\n    return response.ok;\n}\n\nexport async function deleteMessage(messageId: string): Promise<boolean> {\n    const url = `${HOST}/message/${messageId}/`;\n    const response = await fetch(url, {\n        method: 'DELETE',\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${Cookies.get(\"access_token\")}`\n        }\n    });\n    return response.ok;\n}\n\nexport async function deleteUser(userId: string): Promise<boolean> {\n    const url = `${HOST}/user/${userId}/`;\n    const response = await fetch(url, {\n        method: 'DELETE',\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${Cookies.get(\"access_token\")}`\n        }\n    });\n    return response.ok;\n}\n\nexport function getUserIdFromJWT() {\n    const cookie = Cookies.get(\"access_token\");\n    if (cookie) {\n        const jwt: any = jwtDecode(cookie);\n        const userId = jwt.sub;\n        return userId;\n    }\n    return undefined;\n}\n\nexport async function isUserAdmin(userId: string): Promise<boolean>{\n    const url = `${HOST}/user/${userId}/isadmin`;\n    const response = await fetch(url, {\n        method: 'GET',\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\",\n            Authorization: `Bearer ${Cookies.get(\"access_token\")}`\n        }\n    });\n    return response.ok;\n}\n\nexport function logout() {\n    Cookies.remove(\"access_token\");\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}